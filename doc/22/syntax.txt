IDENTIFIER ::= IDENTIFIER_START {IDENTIFIER_START | IDENTIFIER_EXTEND}

IDENTIFIER_START ::=
     LETTER_UPPERCASE
   | LETTER_LOWERCASE
   | LETTER_TITLECASE
   | LETTER_MODIFIER
   | LETTER_OTHER
   | NUMBER_LETTER

IDENTIFIER_EXTEND ::=
     MARK_NON_SPACING
   | MARK_SPACING_COMBINING
   | NUMBER_DECIMAL
   | PUNCTUATION_CONNECTOR

NUMERIC_LITERAL ::= DECIMAL_LITERAL | BASED_LITERAL
DIGIT ::= `0` | `1` | `2` | `3` | `4` | `5` | `6` | `7` | `8` | `9`

DECIMAL_LITERAL ::= NUMERAL [.NUMERAL] [EXPONENT]

NUMERAL ::= DIGIT {[UNDERLINE] DIGIT}

EXPONENT ::= `E` [+] NUMERAL | `E` â€“ NUMERAL

DIGIT ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

BASED_LITERAL ::= BASE # BASED_NUMERAL [.BASED_NUMERAL] # [EXPONENT]

BASE ::= NUMERAL

BASED_NUMERAL ::= EXTENDED_DIGIT {[UNDERLINE] EXTENDED_DIGIT}

EXTENDED_DIGIT ::= DIGIT | `A` | `B` | `C` | `D` | `E` | `F`

CHARACTER_LITERAL ::= 'GRAPHIC_CHARACTER'

STRING_LITERAL ::= "{STRING_ELEMENT}"

STRING_ELEMENT ::= "" | non_quotation_mark_GRAPHIC_CHARACTER

COMMENT ::= --{non_end_of_line_CHARACTER}

pragma ::=
   pragma IDENTIFIER
      [(PRAGMA_ARGUMENT_ASSOCIATION {, PRAGMA_ARGUMENT_ASSOCIATION})];

PRAGMA_ARGUMENT_ASSOCIATION ::=
     [pragma_argument_IDENTIFIER =>] NAME
   | [pragma_argument_IDENTIFIER =>] EXPRESSION
   | pragma_argument_ASPECT_MARK =>  NAME
   | pragma_argument_ASPECT_MARK =>  EXPRESSION

BASIC_DECLARATION ::=
     TYPE_DECLARATION
   | SUBTYPE_DECLARATION
   | OBJECT_DECLARATION
   | NUMBER_DECLARATION
   | SUBPROGRAM_DECLARATION
   | ABSTRACT_SUBPROGRAM_DECLARATION
   | NULL_PROCEDURE_DECLARATION
   | EXPRESSION_FUNCTION_DECLARATION
   | PACKAGE_DECLARATION
   | RENAMING_DECLARATION
   | EXCEPTION_DECLARATION
   | GENERIC_DECLARATION
   | GENERIC_INSTANTIATION

DEFINING_IDENTIFIER ::= IDENTIFIER

TYPE_DECLARATION ::=
     FULL_TYPE_DECLARATION
   | INCOMPLETE_TYPE_DECLARATION
   | PRIVATE_TYPE_DECLARATION
   | PRIVATE_EXTENSION_DECLARATION

FULL_TYPE_DECLARATION ::=
     type DEFINING_IDENTIFIER [KNOWN_DISCRIMINANT_PART] is TYPE_DEFINITION
        [ASPECT_SPECIFICATION];
   | TASK_TYPE_DECLARATION
   | PROTECTED_TYPE_DECLARATION

TYPE_DEFINITION ::=
     ENUMERATION_TYPE_DEFINITION
   | INTEGER_TYPE_DEFINITION
   | REAL_TYPE_DEFINITION
   | ARRAY_TYPE_DEFINITION
   | RECORD_TYPE_DEFINITION
   | ACCESS_TYPE_DEFINITION
   | DERIVED_TYPE_DEFINITION
   | INTERFACE_TYPE_DEFINITION

SUBTYPE_DECLARATION ::=
   subtype DEFINING_IDENTIFIER is SUBTYPE_INDICATION
      [ASPECT_SPECIFICATION];

SUBTYPE_INDICATION ::= [NULL_EXCLUSION] SUBTYPE_MARK [CONSTRAINT]

SUBTYPE_MARK ::= subtype_NAME

CONSTRAINT ::= SCALAR_CONSTRAINT | COMPOSITE_CONSTRAINT

SCALAR_CONSTRAINT ::=
   RANGE_CONSTRAINT | DIGITS_CONSTRAINT | DELTA_CONSTRAINT

COMPOSITE_CONSTRAINT ::= INDEX_CONSTRAINT | DISCRIMINANT_CONSTRAINT

OBJECT_DECLARATION ::=
     DEFINING_IDENTIFIER_LIST :
        [aliased] [constant] SUBTYPE_INDICATION [:= EXPRESSION]
        [ASPECT_SPECIFICATION];
   | DEFINING_IDENTIFIER_LIST :
        [aliased] [constant] ACCESS_DEFINITION [:= EXPRESSION]
        [ASPECT_SPECIFICATION];
   | DEFINING_IDENTIFIER_LIST :
        [aliased] [constant] ARRAY_TYPE_DEFINITION [:= EXPRESSION]
        [ASPECT_SPECIFICATION];
   | SINGLE_TASK_DECLARATION
   | SINGLE_PROTECTED_DECLARATION

DEFINING_IDENTIFIER_LIST ::= DEFINING_IDENTIFIER {, DEFINING_IDENTIFIER}

NUMBER_DECLARATION ::=
   DEFINING_IDENTIFIER_LIST : constant := static_EXPRESSION;

DERIVED_TYPE_DEFINITION ::=
   [abstract] [limited] new parent_SUBTYPE_INDICATION
      [[and INTERFACE_LIST] RECORD_EXTENSION_PART]

RANGE_CONSTRAINT ::= range RANGE_DEFINITION

RANGE_DEFINITION ::=
     RANGE_ATTRIBUTE_REFERENCE
   | SIMPLE_EXPRESSION .. SIMPLE_EXPRESSION

ENUMERATION_TYPE_DEFINITION ::=
   (ENUMERATION_LITERAL_SPECIFICATION
      {, ENUMERATION_LITERAL_SPECIFICATION})

ENUMERATION_LITERAL_SPECIFICATION ::=
   DEFINING_IDENTIFIER | DEFINING_CHARACTER_LITERAL

DEFINING_CHARACTER_LITERAL ::= CHARACTER_LITERAL

INTEGER_TYPE_DEFINITION ::=
   SIGNED_INTEGER_TYPE_DEFINITION | MODULAR_TYPE_DEFINITION

SIGNED_INTEGER_TYPE_DEFINITION ::=
   range static_SIMPLE_EXPRESSION .. static_SIMPLE_EXPRESSION

MODULAR_TYPE_DEFINITION ::= mod static_EXPRESSION

REAL_TYPE_DEFINITION ::=
     FLOATING_POINT_DEFINITION | FIXED_POINT_DEFINITION

FLOATING_POINT_DEFINITION ::=
   digits static_EXPRESSION [REAL_RANGE_SPECIFICATION]

REAL_RANGE_SPECIFICATION ::=
   range static_SIMPLE_EXPRESSION .. static_SIMPLE_EXPRESSION

FIXED_POINT_DEFINITION ::=
     ORDINARY_FIXED_POINT_DEFINITION | DECIMAL_FIXED_POINT_DEFINITION

ORDINARY_FIXED_POINT_DEFINITION ::=
   delta static_EXPRESSION REAL_RANGE_SPECIFICATION

DECIMAL_FIXED_POINT_DEFINITION ::=
   delta static_EXPRESSION digits static_EXPRESSION
      [REAL_RANGE_SPECIFICATION]

DIGITS_CONSTRAINT ::=
   digits static_SIMPLE_EXPRESSION [RANGE_CONSTRAINT]

ARRAY_TYPE_DEFINITION ::=
     UNCONSTRAINED_ARRAY_DEFINITION | CONSTRAINED_ARRAY_DEFINITION

UNCONSTRAINED_ARRAY_DEFINITION ::=
   array (INDEX_SUBTYPE_DEFINITION {, INDEX_SUBTYPE_DEFINITION})
      of COMPONENT_DEFINITION

INDEX_SUBTYPE_DEFINITION ::= SUBTYPE_MARK range <>

CONSTRAINED_ARRAY_DEFINITION ::=
   array (DISCRETE_SUBTYPE_DEFINITION {, DISCRETE_SUBTYPE_DEFINITION})
      of COMPONENT_DEFINITION

DISCRETE_SUBTYPE_DEFINITION ::=
   discrete_SUBTYPE_INDICATION | RANGE_DEFINITION

COMPONENT_DEFINITION ::=
   [aliased] SUBTYPE_INDICATION | [aliased] ACCESS_DEFINITION

INDEX_CONSTRAINT ::= (DISCRETE_RANGE {, DISCRETE_RANGE})

DISCRETE_RANGE ::= discrete_SUBTYPE_INDICATION | RANGE_DEFINITION

DISCRIMINANT_PART ::= UNKNOWN_DISCRIMINANT_PART | KNOWN_DISCRIMINANT_PART

UNKNOWN_DISCRIMINANT_PART ::= (<>)

KNOWN_DISCRIMINANT_PART ::=
   (DISCRIMINANT_SPECIFICATION {; DISCRIMINANT_SPECIFICATION})

DISCRIMINANT_SPECIFICATION ::=
     DEFINING_IDENTIFIER_LIST : [NULL_EXCLUSION] SUBTYPE_MARK
        [:= DEFAULT_EXPRESSION] [ASPECT_SPECIFICATION]
   | DEFINING_IDENTIFIER_LIST : ACCESS_DEFINITION
        [:= DEFAULT_EXPRESSION] [ASPECT_SPECIFICATION]

DEFAULT_EXPRESSION ::= EXPRESSION

DISCRIMINANT_CONSTRAINT ::=
   (DISCRIMINANT_ASSOCIATION {, DISCRIMINANT_ASSOCIATION})

DISCRIMINANT_ASSOCIATION ::=
   [discriminant_SELECTOR_NAME {`|` discriminant_SELECTOR_NAME} =>]
      EXPRESSION

RECORD_TYPE_DEFINITION ::=
   [[abstract] tagged] [limited] RECORD_DEFINITION

RECORD_DEFINITION ::=
     record
        COMPONENT_LIST
     end record [record_IDENTIFIER]
   | null record

COMPONENT_LIST ::=
     COMPONENT_ITEM {COMPONENT_ITEM}
   | {COMPONENT_ITEM} VARIANT_PART
   | null;

COMPONENT_ITEM ::= COMPONENT_DECLARATION | ASPECT_CLAUSE

COMPONENT_DECLARATION ::=
   DEFINING_IDENTIFIER_LIST : COMPONENT_DEFINITION [:= DEFAULT_EXPRESSION]
      [ASPECT_SPECIFICATION];

VARIANT_PART ::=
   case discriminant_DIRECT_NAME is
      VARIANT
      {VARIANT}
   end case;

VARIANT ::=
   when DISCRETE_CHOICE_LIST =>
      COMPONENT_LIST

DISCRETE_CHOICE_LIST ::= DISCRETE_CHOICE {`|` DISCRETE_CHOICE}

DISCRETE_CHOICE ::=
     CHOICE_EXPRESSION
   | discrete_SUBTYPE_INDICATION
   | RANGE_DEFINITION
   | others

RECORD_EXTENSION_PART ::= with RECORD_DEFINITION

ABSTRACT_SUBPROGRAM_DECLARATION ::=
   [OVERRIDING_INDICATOR]
   SUBPROGRAM_SPECIFICATION is abstract
      [ASPECT_SPECIFICATION];

INTERFACE_TYPE_DEFINITION ::=
   [limited | task | protected | synchronized]
      interface [and INTERFACE_LIST]

INTERFACE_LIST ::= interface_SUBTYPE_MARK {and interface_SUBTYPE_MARK}

ACCESS_TYPE_DEFINITION ::=
     [NULL_EXCLUSION] ACCESS_TO_OBJECT_DEFINITION
   | [NULL_EXCLUSION] ACCESS_TO_SUBPROGRAM_DEFINITION

ACCESS_TO_OBJECT_DEFINITION ::=
   access [GENERAL_ACCESS_MODIFIER] SUBTYPE_INDICATION

GENERAL_ACCESS_MODIFIER ::= all | constant

ACCESS_TO_SUBPROGRAM_DEFINITION ::=
     access [protected] procedure PARAMETER_PROFILE
   | access [protected] function PARAMETER_AND_RESULT_PROFILE

NULL_EXCLUSION ::= not null

ACCESS_DEFINITION ::=
     [NULL_EXCLUSION] access [constant] SUBTYPE_MARK
   | [NULL_EXCLUSION] access [protected]
        procedure PARAMETER_PROFILE
   | [NULL_EXCLUSION] access [protected]
        function PARAMETER_AND_RESULT_PROFILE

INCOMPLETE_TYPE_DECLARATION ::=
   type DEFINING_IDENTIFIER [DISCRIMINANT_PART] [is tagged];

DECLARATIVE_PART ::= {DECLARATIVE_ITEM}

DECLARATIVE_ITEM ::= BASIC_DECLARATIVE_ITEM | BODY_DEFINITION

BASIC_DECLARATIVE_ITEM ::= BASIC_DECLARATION | ASPECT_CLAUSE | USE_CLAUSE

BODY_DEFINITION ::= PROPER_BODY | BODY_STUB

PROPER_BODY ::=
     SUBPROGRAM_BODY
   | PACKAGE_BODY
   | TASK_BODY
   | PROTECTED_BODY

NAME ::=
     DIRECT_NAME
   | EXPLICIT_DEREFERENCE
   | INDEXED_COMPONENT
   | SLICE
   | SELECTED_COMPONENT
   | ATTRIBUTE_REFERENCE
   | TYPE_CONVERSION
   | FUNCTION_CALL
   | CHARACTER_LITERAL
   | QUALIFIED_EXPRESSION
   | GENERALIZED_REFERENCE
   | GENERALIZED_INDEXING
   | TARGET_NAME

DIRECT_NAME ::= IDENTIFIER | OPERATOR_SYMBOL

PREFIX ::= NAME | IMPLICIT_DEREFERENCE

EXPLICIT_DEREFERENCE ::= NAME.all

IMPLICIT_DEREFERENCE ::= NAME

INDEXED_COMPONENT ::= PREFIX(EXPRESSION {, EXPRESSION})

SLICE ::= PREFIX(DISCRETE_RANGE)

SELECTED_COMPONENT ::= PREFIX.SELECTOR_NAME

SELECTOR_NAME ::= IDENTIFIER | CHARACTER_LITERAL | OPERATOR_SYMBOL

ATTRIBUTE_REFERENCE ::=
     PREFIX'ATTRIBUTE_DESIGNATOR
   | REDUCTION_ATTRIBUTE_REFERENCE

ATTRIBUTE_DESIGNATOR ::=
     IDENTIFIER [(static_EXPRESSION)]
   | `Access` | `Delta` | `Digits` | `Mod`

RANGE_ATTRIBUTE_REFERENCE ::= PREFIX'RANGE_ATTRIBUTE_DESIGNATOR

RANGE_ATTRIBUTE_DESIGNATOR ::= `Range`[(static_EXPRESSION)]

GENERALIZED_REFERENCE ::= reference_object_NAME

GENERALIZED_INDEXING ::=
   indexable_container_object_PREFIX ACTUAL_PARAMETER_PART

AGGREGATE ::=
     RECORD_AGGREGATE
   | EXTENSION_AGGREGATE 
   | ARRAY_AGGREGATE
   | DELTA_AGGREGATE 
   | CONTAINER_AGGREGATE

RECORD_AGGREGATE ::= (RECORD_COMPONENT_ASSOCIATION_LIST)

RECORD_COMPONENT_ASSOCIATION_LIST ::=
     RECORD_COMPONENT_ASSOCIATION {, RECORD_COMPONENT_ASSOCIATION}
   | null record

RECORD_COMPONENT_ASSOCIATION ::=
     [COMPONENT_CHOICE_LIST =>] EXPRESSION
   | COMPONENT_CHOICE_LIST => <>

COMPONENT_CHOICE_LIST ::=
     component_SELECTOR_NAME {`|` component_SELECTOR_NAME}
   | others

EXTENSION_AGGREGATE ::=
   (ANCESTOR_PART with RECORD_COMPONENT_ASSOCIATION_LIST)

ANCESTOR_PART ::= EXPRESSION | SUBTYPE_MARK

ARRAY_AGGREGATE ::=
     POSITIONAL_ARRAY_AGGREGATE
   | NULL_ARRAY_AGGREGATE
   | NAMED_ARRAY_AGGREGATE

POSITIONAL_ARRAY_AGGREGATE ::=
     (EXPRESSION , EXPRESSION {, EXPRESSION})
   | (EXPRESSION {, EXPRESSION}, others => EXPRESSION)
   | (EXPRESSION {, EXPRESSION}, others => <>)
   | `[` EXPRESSION {, EXPRESSION}[, others => EXPRESSION] `]`
   | `[` EXPRESSION {, EXPRESSION}, others => <> `]`

NULL_ARRAY_AGGREGATE ::= `[` `]`

NAMED_ARRAY_AGGREGATE ::=
     (ARRAY_COMPONENT_ASSOCIATION_LIST)
   | `[` ARRAY_COMPONENT_ASSOCIATION_LIST `]`

ARRAY_COMPONENT_ASSOCIATION_LIST ::=
   ARRAY_COMPONENT_ASSOCIATION {, ARRAY_COMPONENT_ASSOCIATION}

ARRAY_COMPONENT_ASSOCIATION ::=
     DISCRETE_CHOICE_LIST => EXPRESSION
   | DISCRETE_CHOICE_LIST => <>
   | ITERATED_COMPONENT_ASSOCIATION

ITERATED_COMPONENT_ASSOCIATION ::=
     for DEFINING_IDENTIFIER in DISCRETE_CHOICE_LIST => EXPRESSION
   | for ITERATOR_SPECIFICATION => EXPRESSION

DELTA_AGGREGATE ::= RECORD_DELTA_AGGREGATE | ARRAY_DELTA_AGGREGATE

RECORD_DELTA_AGGREGATE ::=
   (base_EXPRESSION with delta RECORD_COMPONENT_ASSOCIATION_LIST)

ARRAY_DELTA_AGGREGATE ::=
     (base_EXPRESSION with delta ARRAY_COMPONENT_ASSOCIATION_LIST)
   | `[` base_EXPRESSION with delta ARRAY_COMPONENT_ASSOCIATION_LIST `]`

CONTAINER_AGGREGATE ::=
     NULL_CONTAINER_AGGREGATE
   | POSITIONAL_CONTAINER_AGGREGATE
   | NAMED_CONTAINER_AGGREGATE

NULL_CONTAINER_AGGREGATE ::= `[` `]`

POSITIONAL_CONTAINER_AGGREGATE ::= `[` EXPRESSION {, EXPRESSION} `]`

NAMED_CONTAINER_AGGREGATE ::= `[` CONTAINER_ELEMENT_ASSOCIATION_LIST `]`

CONTAINER_ELEMENT_ASSOCIATION_LIST ::=
   CONTAINER_ELEMENT_ASSOCIATION {, CONTAINER_ELEMENT_ASSOCIATION}

CONTAINER_ELEMENT_ASSOCIATION ::=
     KEY_CHOICE_LIST => EXPRESSION
   | KEY_CHOICE_LIST => <>
   | ITERATED_ELEMENT_ASSOCIATION

KEY_CHOICE_LIST ::= KEY_CHOICE {`|` KEY_CHOICE}

KEY_CHOICE ::= key_EXPRESSION | DISCRETE_RANGE

ITERATED_ELEMENT_ASSOCIATION ::=
     for LOOP_PARAMETER_SPECIFICATION [use key_EXPRESSION] => EXPRESSION
   | for ITERATOR_SPECIFICATION [use key_EXPRESSION] => EXPRESSION

EXPRESSION ::=
     RELATION {and RELATION}
   | RELATION {or RELATION}
   | RELATION {xor RELATION}
   | RELATION {and then RELATION}
   | RELATION {or else RELATION}

CHOICE_EXPRESSION ::=
     CHOICE_RELATION {and CHOICE_RELATION}
   | CHOICE_RELATION {or CHOICE_RELATION}
   | CHOICE_RELATION {xor CHOICE_RELATION}
   | CHOICE_RELATION {and then CHOICE_RELATION}
   | CHOICE_RELATION {or else CHOICE_RELATION}

CHOICE_RELATION ::=
   SIMPLE_EXPRESSION [RELATIONAL_OPERATOR SIMPLE_EXPRESSION]

RELATION ::=
     SIMPLE_EXPRESSION [RELATIONAL_OPERATOR SIMPLE_EXPRESSION]
   | tested_SIMPLE_EXPRESSION [not] in MEMBERSHIP_CHOICE_LIST
   | RAISE_EXPRESSION

MEMBERSHIP_CHOICE_LIST ::= MEMBERSHIP_CHOICE {`|` MEMBERSHIP_CHOICE}

MEMBERSHIP_CHOICE ::= choice_SIMPLE_EXPRESSION | RANGE | SUBTYPE_MARK

SIMPLE_EXPRESSION ::=
   [UNARY_ADDING_OPERATOR] TERM {BINARY_ADDING_OPERATOR TERM}

TERM ::= FACTOR {MULTIPLYING_OPERATOR FACTOR}

FACTOR ::= PRIMARY [** PRIMARY] | abs PRIMARY | not PRIMARY

PRIMARY ::=
     NUMERIC_LITERAL
   | null
   | STRING_LITERAL
   | AGGREGATE
   | NAME
   | ALLOCATOR
   | (EXPRESSION)
   | (CONDITIONAL_EXPRESSION)
   | (QUANTIFIED_EXPRESSION)
   | (DECLARE_EXPRESSION)

LOGICAL_OPERATOR ::= and | or | xor

RELATIONAL_OPERATOR ::= = | /= | < | <= | > | >=

BINARY_ADDING_OPERATOR ::= + | â€“ | &

UNARY_ADDING_OPERATOR ::= + | â€“

MULTIPLYING_OPERATOR ::= * | / | mod | rem

HIGHEST_PRECEDENCE_OPERATOR ::= ** | abs | not

CONDITIONAL_EXPRESSION ::= IF_EXPRESSION | CASE_EXPRESSION

IF_EXPRESSION ::=
   if CONDITION then dependent_EXPRESSION
   {elsif CONDITION then dependent_EXPRESSION}
   [else dependent_EXPRESSION]

CONDITION ::= boolean_EXPRESSION

CASE_EXPRESSION ::=
   case selecting_EXPRESSION is
      CASE_EXPRESSION_ALTERNATIVE {, CASE_EXPRESSION_ALTERNATIVE}

CASE_EXPRESSION_ALTERNATIVE ::=
   when DISCRETE_CHOICE_LIST =>
      dependent_EXPRESSION

QUANTIFIED_EXPRESSION ::=
     for QUANTIFIER LOOP_PARAMETER_SPECIFICATION => PREDICATE
   | for QUANTIFIER ITERATOR_SPECIFICATION => PREDICATE

QUANTIFIER ::= all | some

PREDICATE ::= boolean_EXPRESSION

DECLARE_EXPRESSION ::=
   declare {DECLARE_ITEM}
   begin body_EXPRESSION

DECLARE_ITEM ::= OBJECT_DECLARATION | OBJECT_RENAMING_DECLARATION

REDUCTION_ATTRIBUTE_REFERENCE ::=
     VALUE_SEQUENCE'REDUCTION_ATTRIBUTE_DESIGNATOR
   | PREFIX'REDUCTION_ATTRIBUTE_DESIGNATOR

VALUE_SEQUENCE ::=
   `[` [parallel [(CHUNK_SPECIFICATION)] [ASPECT_SPECIFICATION]]
      ITERATED_ELEMENT_ASSOCIATION `]`

REDUCTION_ATTRIBUTE_DESIGNATOR ::=
   reduction_IDENTIFIER(REDUCTION_SPECIFICATION)

REDUCTION_SPECIFICATION ::= reducer_NAME , initial_value_EXPRESSION

TYPE_CONVERSION ::= SUBTYPE_MARK(EXPRESSION) | SUBTYPE_MARK(NAME)

QUALIFIED_EXPRESSION ::=
   SUBTYPE_MARK'(EXPRESSION) | SUBTYPE_MARK'AGGREGATE

ALLOCATOR ::=
     new [SUBPOOL_SPECIFICATION] SUBTYPE_INDICATION
   | new [SUBPOOL_SPECIFICATION] QUALIFIED_EXPRESSION

SUBPOOL_SPECIFICATION ::= (subpool_handle_NAME)

SEQUENCE_OF_STATEMENTS ::= STATEMENT {STATEMENT} {LABEL}

STATEMENT ::= {LABEL} SIMPLE_STATEMENT | {LABEL} COMPOUND_STATEMENT

SIMPLE_STATEMENT ::=
     NULL_STATEMENT
   | ASSIGNMENT_STATEMENT
   | EXIT_STATEMENT
   | GOTO_STATEMENT
   | PROCEDURE_CALL_STATEMENT
   | SIMPLE_RETURN_STATEMENT
   | ENTRY_CALL_STATEMENT
   | REQUEUE_STATEMENT
   | DELAY_STATEMENT
   | ABORT_STATEMENT
   | RAISE_STATEMENT
   | CODE_STATEMENT

COMPOUND_STATEMENT ::=
     IF_STATEMENT
   | CASE_STATEMENT
   | LOOP_STATEMENT
   | BLOCK_STATEMENT
   | EXTENDED_RETURN_STATEMENT
   | PARALLEL_BLOCK_STATEMENT
   | ACCEPT_STATEMENT
   | SELECT_STATEMENT

NULL_STATEMENT ::= null;

LABEL ::= <<label_STATEMENT_IDENTIFIER>>

STATEMENT_IDENTIFIER ::= DIRECT_NAME

ASSIGNMENT_STATEMENT ::= variable_NAME := EXPRESSION;

TARGET_NAME ::= @

IF_STATEMENT ::=
   if CONDITION then
      SEQUENCE_OF_STATEMENTS
   {elsif CONDITION then
      SEQUENCE_OF_STATEMENTS}
   [else
      SEQUENCE_OF_STATEMENTS]
   end if;

CASE_STATEMENT ::=
   case selecting_EXPRESSION is
      CASE_STATEMENT_ALTERNATIVE
      {CASE_STATEMENT_ALTERNATIVE}
   end case;

CASE_STATEMENT_ALTERNATIVE ::=
   when DISCRETE_CHOICE_LIST =>
      SEQUENCE_OF_STATEMENTS

LOOP_STATEMENT ::=
   [loop_STATEMENT_IDENTIFIER :]
      [ITERATION_SCHEME] LOOP
         SEQUENCE_OF_STATEMENTS
      end LOOP [loop_IDENTIFIER];

ITERATION_SCHEME ::=
     while CONDITION
   | for LOOP_PARAMETER_SPECIFICATION
   | for ITERATOR_SPECIFICATION
   | [parallel [ASPECT_SPECIFICATION]]
        for PROCEDURAL_ITERATOR
   | parallel [(CHUNK_SPECIFICATION)] [ASPECT_SPECIFICATION]
        for LOOP_PARAMETER_SPECIFICATION
   | parallel [(CHUNK_SPECIFICATION)] [ASPECT_SPECIFICATION]
        for ITERATOR_SPECIFICATION

CHUNK_SPECIFICATION ::=
     integer_SIMPLE_EXPRESSION
   | DEFINING_IDENTIFIER in DISCRETE_SUBTYPE_DEFINITION

LOOP_PARAMETER_SPECIFICATION ::=
   DEFINING_IDENTIFIER in [reverse] DISCRETE_SUBTYPE_DEFINITION
      [ITERATOR_FILTER]

ITERATOR_FILTER ::= when CONDITION

ITERATOR_SPECIFICATION ::=
     DEFINING_IDENTIFIER [: LOOP_PARAMETER_SUBTYPE_INDICATION]
        in [reverse] iterator_NAME [ITERATOR_FILTER]
   | DEFINING_IDENTIFIER [: LOOP_PARAMETER_SUBTYPE_INDICATION
        of [reverse] iterable_NAME [ITERATOR_FILTER]

LOOP_PARAMETER_SUBTYPE_INDICATION ::=
   SUBTYPE_INDICATION | ACCESS_DEFINITION

PROCEDURAL_ITERATOR ::=
   ITERATOR_PARAMETER_SPECIFICATION of ITERATOR_PROCEDURE_CALL
      [ITERATOR_FILTER]

ITERATOR_PARAMETER_SPECIFICATION ::=
     FORMAL_PART
   | (DEFINING_IDENTIFIER {, DEFINING_IDENTIFIER})

ITERATOR_PROCEDURE_CALL ::=
     procedure_NAME
   | procedure_PREFIX ITERATOR_ACTUAL_PARAMETER_PART

ITERATOR_ACTUAL_PARAMETER_PART ::=
   (ITERATOR_PARAMETER_ASSOCIATION {, ITERATOR_PARAMETER_ASSOCIATION})

ITERATOR_PARAMETER_ASSOCIATION ::=
     PARAMETER_ASSOCIATION | PARAMETER_ASSOCIATION_WITH_BOX

PARAMETER_ASSOCIATION_WITH_BOX ::=
   [formal_parameter_SELECTOR_NAME =>] <>

BLOCK_STATEMENT ::=
   [block_STATEMENT_IDENTIFIER :]
      [DECLARE
         DECLARATIVE_PART]
      begin
         HANDLED_SEQUENCE_OF_STATEMENTS
      end [block_IDENTIFIER];

PARALLEL_BLOCK_STATEMENT ::=
   PARALLEL [(CHUNK_SPECIFICATION)] [ASPECT_SPECIFICATION] do
      SEQUENCE_OF_STATEMENTS
   and
      SEQUENCE_OF_STATEMENTS
   {and
      SEQUENCE_OF_STATEMENTS}
   end do;

EXIT_STATEMENT ::= exit [loop_NAME] [WHEN CONDITION];

GOTO_STATEMENT ::= goto label_NAME;

SUBPROGRAM_DECLARATION ::=
   [OVERRIDING_INDICATOR]
   SUBPROGRAM_SPECIFICATION
      [ASPECT_SPECIFICATION];

SUBPROGRAM_SPECIFICATION ::=
     PROCEDURE_SPECIFICATION | FUNCTION_SPECIFICATION

PROCEDURE_SPECIFICATION ::=
   procedure DEFINING_PROGRAM_UNIT_NAME PARAMETER_PROFILE

FUNCTION_SPECIFICATION ::=
   function DEFINING_DESIGNATOR PARAMETER_AND_RESULT_PROFILE

DESIGNATOR ::= [PARENT_UNIT_NAME.] IDENTIFIER | OPERATOR_SYMBOL

DEFINING_DESIGNATOR ::=
     DEFINING_PROGRAM_UNIT_NAME | DEFINING_OPERATOR_SYMBOL

DEFINING_PROGRAM_UNIT_NAME ::= [PARENT_UNIT_NAME.] DEFINING_IDENTIFIER

OPERATOR_SYMBOL ::= STRING_LITERAL

DEFINING_OPERATOR_SYMBOL ::= OPERATOR_SYMBOL

PARAMETER_PROFILE ::= [FORMAL_PART]

PARAMETER_AND_RESULT_PROFILE ::=
     [FORMAL_PART] return [NULL_EXCLUSION] SUBTYPE_MARK
   | [FORMAL_PART] return ACCESS_DEFINITION

FORMAL_PART ::= (PARAMETER_SPECIFICATION {; PARAMETER_SPECIFICATION})

PARAMETER_SPECIFICATION ::=
     DEFINING_IDENTIFIER_LIST :
        [aliased] MODE [NULL_EXCLUSION] SUBTYPE_MARK
           [:= DEFAULT_EXPRESSION] [ASPECT_SPECIFICATION]
   | DEFINING_IDENTIFIER_LIST :
        ACCESS_DEFINITION
           [:= DEFAULT_EXPRESSION] [ASPECT_SPECIFICATION]

MODE ::= [in] | in out | out

GLOBAL_ASPECT_DEFINITION ::=
     null
   | `Unspecified`
   | GLOBAL_MODE GLOBAL_DESIGNATOR
   | (GLOBAL_ASPECT_ELEMENT {; GLOBAL_ASPECT_ELEMENT})

GLOBAL_ASPECT_ELEMENT ::=
     GLOBAL_MODE GLOBAL_SET
   | GLOBAL_MODE all
   | GLOBAL_MODE synchronized

GLOBAL_MODE ::= BASIC_GLOBAL_MODE | EXTENDED_GLOBAL_MODE

BASIC_GLOBAL_MODE ::= in | in out | out

GLOBAL_SET ::= GLOBAL_NAME {, GLOBAL_NAME}

GLOBAL_DESIGNATOR ::= all | synchronized | GLOBAL_NAME

GLOBAL_NAME ::= object_NAME | package_NAME

SUBPROGRAM_BODY ::=
   [OVERRIDING_INDICATOR]
   SUBPROGRAM_SPECIFICATION [ASPECT_SPECIFICATION] is
      DECLARATIVE_PART
   begin
      HANDLED_SEQUENCE_OF_STATEMENTS
   end [DESIGNATOR];

PROCEDURE_CALL_STATEMENT ::=
     procedure_NAME;
   | procedure_PREFIX ACTUAL_PARAMETER_PART;

FUNCTION_CALL ::=
     function_NAME
   | function_PREFIX ACTUAL_PARAMETER_PART

ACTUAL_PARAMETER_PART ::=
   (PARAMETER_ASSOCIATION {, PARAMETER_ASSOCIATION})

PARAMETER_ASSOCIATION ::=
   [formal_parameter_SELECTOR_NAME =>] EXPLICIT_ACTUAL_PARAMETER

EXPLICIT_ACTUAL_PARAMETER ::= EXPRESSION | variable_NAME

SIMPLE_RETURN_STATEMENT ::= return [EXPRESSION];

EXTENDED_RETURN_OBJECT_DECLARATION ::=
   DEFINING_IDENTIFIER : [aliased] [constant]
      RETURN_SUBTYPE_INDICATION [:= EXPRESSION]
      [ASPECT_SPECIFICATION]

EXTENDED_RETURN_STATEMENT ::=
   return EXTENDED_RETURN_OBJECT_DECLARATION [do
      HANDLED_SEQUENCE_OF_STATEMENTS
   end return];

RETURN_SUBTYPE_INDICATION ::= SUBTYPE_INDICATION | ACCESS_DEFINITION

NULL_PROCEDURE_DECLARATION ::=
   [OVERRIDING_INDICATOR]
   PROCEDURE_SPECIFICATION is null
      [ASPECT_SPECIFICATION];

EXPRESSION_FUNCTION_DECLARATION ::=
     [OVERRIDING_INDICATOR]
     FUNCTION_SPECIFICATION is
        (EXPRESSION)
        [ASPECT_SPECIFICATION];
   | [OVERRIDING_INDICATOR]
     FUNCTION_SPECIFICATION is
        AGGREGATE
        [ASPECT_SPECIFICATION];

PACKAGE_DECLARATION ::= PACKAGE_SPECIFICATION;

PACKAGE_SPECIFICATION ::=
   package DEFINING_PROGRAM_UNIT_NAME
      [ASPECT_SPECIFICATION] is
      {BASIC_DECLARATIVE_ITEM}
   [private
      {BASIC_DECLARATIVE_ITEM}]
   end [[PARENT_UNIT_NAME.] IDENTIFIER]

PACKAGE_BODY ::=
   package body DEFINING_PROGRAM_UNIT_NAME
      [ASPECT_SPECIFICATION] is
      DECLARATIVE_PART
   [begin
      HANDLED_SEQUENCE_OF_STATEMENTS]
   end [[PARENT_UNIT_NAME.] IDENTIFIER];

PRIVATE_TYPE_DECLARATION ::=
   type DEFINING_IDENTIFIER [DISCRIMINANT_PART] is
      [[abstract] tagged] [limited] private [ASPECT_SPECIFICATION];

PRIVATE_EXTENSION_DECLARATION ::=
   type DEFINING_IDENTIFIER [DISCRIMINANT_PART] is
      [abstract] [limited | synchronized] new ancestor_SUBTYPE_INDICATION
      [and INTERFACE_LIST] with private
      [ASPECT_SPECIFICATION];

OVERRIDING_INDICATOR ::= [not] overriding

USE_CLAUSE ::= USE_PACKAGE_CLAUSE | USE_TYPE_CLAUSE

USE_PACKAGE_CLAUSE ::= use package_NAME {, package_NAME};

USE_TYPE_CLAUSE ::= use [all] type SUBTYPE_MARK {, SUBTYPE_MARK};

RENAMING_DECLARATION ::=
     OBJECT_RENAMING_DECLARATION
   | EXCEPTION_RENAMING_DECLARATION
   | PACKAGE_RENAMING_DECLARATION
   | SUBPROGRAM_RENAMING_DECLARATION
   | GENERIC_RENAMING_DECLARATION

OBJECT_RENAMING_DECLARATION ::=
     DEFINING_IDENTIFIER [: [NULL_EXCLUSION] SUBTYPE_MARK]
        renames object_NAME [ASPECT_SPECIFICATION];
   | DEFINING_IDENTIFIER : ACCESS_DEFINITION
        renames object_NAME [ASPECT_SPECIFICATION];

EXCEPTION_RENAMING_DECLARATION ::=
   DEFINING_IDENTIFIER : exception
      renames exception_NAME [ASPECT_SPECIFICATION];

PACKAGE_RENAMING_DECLARATION ::=
   package DEFINING_PROGRAM_UNIT_NAME
      renames package_NAME [ASPECT_SPECIFICATION];

SUBPROGRAM_RENAMING_DECLARATION ::=
   [OVERRIDING_INDICATOR]
   SUBPROGRAM_SPECIFICATION renames callable_entity_NAME
      [ASPECT_SPECIFICATION];

GENERIC_RENAMING_DECLARATION ::=
     generic package DEFINING_PROGRAM_UNIT_NAME
        renames generic_package_NAME [ASPECT_SPECIFICATION];
   | generic procedure DEFINING_PROGRAM_UNIT_NAME
        renames generic_procedure_NAME [ASPECT_SPECIFICATION];
   | generic function DEFINING_PROGRAM_UNIT_NAME
        renames generic_function_NAME [ASPECT_SPECIFICATION];

TASK_TYPE_DECLARATION ::=
   task type DEFINING_IDENTIFIER [KNOWN_DISCRIMINANT_PART]
      [ASPECT_SPECIFICATION] [is
         [new INTERFACE_LIST with]
         TASK_DEFINITION];

SINGLE_TASK_DECLARATION ::=
   task DEFINING_IDENTIFIER
      [ASPECT_SPECIFICATION] [is
         [new INTERFACE_LIST with]
         TASK_DEFINITION];

TASK_DEFINITION ::=
   {TASK_ITEM}
   [private
      {TASK_ITEM}]
   end [task_IDENTIFIER]

TASK_ITEM ::= ENTRY_DECLARATION | ASPECT_CLAUSE

TASK_BODY ::=
   task body DEFINING_IDENTIFIER [ASPECT_SPECIFICATION] is
      DECLARATIVE_PART
   begin
      HANDLED_SEQUENCE_OF_STATEMENTS
   end [task_IDENTIFIER];

PROTECTED_TYPE_DECLARATION ::=
   protected type DEFINING_IDENTIFIER [KNOWN_DISCRIMINANT_PART]
      [ASPECT_SPECIFICATION] is
         [new INTERFACE_LIST with]
         PROTECTED_DEFINITION;

SINGLE_PROTECTED_DECLARATION ::=
   protected DEFINING_IDENTIFIER
      [ASPECT_SPECIFICATION] is
         [new INTERFACE_LIST with]
         PROTECTED_DEFINITION;

PROTECTED_DEFINITION ::=
   {PROTECTED_OPERATION_DECLARATION}
   [private
      {PROTECTED_ELEMENT_DECLARATION}]
   end [protected_IDENTIFIER]

PROTECTED_OPERATION_DECLARATION ::=
     SUBPROGRAM_DECLARATION
   | ENTRY_DECLARATION
   | ASPECT_CLAUSE

PROTECTED_ELEMENT_DECLARATION ::=
     PROTECTED_OPERATION_DECLARATION
   | COMPONENT_DECLARATION

PROTECTED_BODY ::=
   protected body DEFINING_IDENTIFIER [ASPECT_SPECIFICATION] is
      {PROTECTED_OPERATION_ITEM}
   end [protected_IDENTIFIER];

PROTECTED_OPERATION_ITEM ::=
     SUBPROGRAM_DECLARATION
   | SUBPROGRAM_BODY
   | NULL_PROCEDURE_DECLARATION
   | EXPRESSION_FUNCTION_DECLARATION
   | ENTRY_BODY
   | ASPECT_CLAUSE

SYNCHRONIZATION_KIND ::=
   `By_Entry` | `By_Protected_Procedure` | `Optional`

ENTRY_DECLARATION ::=
   [OVERRIDING_INDICATOR]
   entry DEFINING_IDENTIFIER [(DISCRETE_SUBTYPE_DEFINITION)]
      PARAMETER_PROFILE [ASPECT_SPECIFICATION];

ACCEPT_STATEMENT ::=
   accept entry_DIRECT_NAME [(ENTRY_INDEX)] PARAMETER_PROFILE [do
      HANDLED_SEQUENCE_OF_STATEMENTS
   end [entry_IDENTIFIER]];

ENTRY_INDEX ::= EXPRESSION

ENTRY_BODY ::=
   entry DEFINING_IDENTIFIER ENTRY_BODY_FORMAL_PART
      [ASPECT_SPECIFICATION]
   ENTRY_BARRIER is
      DECLARATIVE_PART
   begin
      HANDLED_SEQUENCE_OF_STATEMENTS
   end [entry_IDENTIFIER];

ENTRY_BODY_FORMAL_PART ::=
   [(ENTRY_INDEX_SPECIFICATION)] PARAMETER_PROFILE

ENTRY_BARRIER ::= when CONDITION

ENTRY_INDEX_SPECIFICATION ::=
   for DEFINING_IDENTIFIER
   in DISCRETE_SUBTYPE_DEFINITION [ASPECT_SPECIFICATION]

ENTRY_CALL_STATEMENT ::= entry_NAME [ACTUAL_PARAMETER_PART];

REQUEUE_STATEMENT ::= requeue procedure_or_entry_NAME [with abort];

DELAY_STATEMENT ::= DELAY_UNTIL_STATEMENT | DELAY_RELATIVE_STATEMENT

DELAY_UNTIL_STATEMENT ::= delay until delay_EXPRESSION;

DELAY_RELATIVE_STATEMENT ::= delay delay_EXPRESSION;

SELECT_STATEMENT ::=
     SELECTIVE_ACCEPT
   | TIMED_ENTRY_CALL
   | CONDITIONAL_ENTRY_CALL
   | ASYNCHRONOUS_SELECT

SELECTIVE_ACCEPT ::=
   select
      [GUARD] SELECT_ALTERNATIVE
   {or
      [GUARD] SELECT_ALTERNATIVE}
   [else
      SEQUENCE_OF_STATEMENTS]
   end select;

GUARD ::= when CONDITION =>

SELECT_ALTERNATIVE ::=
     ACCEPT_ALTERNATIVE
   | DELAY_ALTERNATIVE
   | TERMINATE_ALTERNATIVE

ACCEPT_ALTERNATIVE ::= ACCEPT_STATEMENT [SEQUENCE_OF_STATEMENTS]

DELAY_ALTERNATIVE ::= DELAY_STATEMENT [SEQUENCE_OF_STATEMENTS]

TERMINATE_ALTERNATIVE ::= terminate;

TIMED_ENTRY_CALL ::=
   select
      ENTRY_CALL_ALTERNATIVE
   or
      DELAY_ALTERNATIVE
   end select;

ENTRY_CALL_ALTERNATIVE ::=
   PROCEDURE_OR_ENTRY_CALL [SEQUENCE_OF_STATEMENTS]

PROCEDURE_OR_ENTRY_CALL ::=
   PROCEDURE_CALL_STATEMENT | ENTRY_CALL_STATEMENT

CONDITIONAL_ENTRY_CALL ::=
   select
      ENTRY_CALL_ALTERNATIVE
   else
      SEQUENCE_OF_STATEMENTS
   end select;

ASYNCHRONOUS_SELECT ::=
   select
      TRIGGERING_ALTERNATIVE
   then abort
      ABORTABLE_PART
   end select;

TRIGGERING_ALTERNATIVE ::= TRIGGERING_STATEMENT [SEQUENCE_OF_STATEMENTS]

TRIGGERING_STATEMENT ::= PROCEDURE_OR_ENTRY_CALL | DELAY_STATEMENT

ABORTABLE_PART ::= SEQUENCE_OF_STATEMENTS

ABORT_STATEMENT ::= abort task_NAME {, task_NAME};

COMPILATION ::= {COMPILATION_UNIT}

COMPILATION_UNIT ::=
     CONTEXT_CLAUSE LIBRARY_ITEM
   | CONTEXT_CLAUSE SUBUNIT

LIBRARY_ITEM ::=
     [private] LIBRARY_UNIT_DECLARATION
   | LIBRARY_UNIT_BODY
   | [private] LIBRARY_UNIT_RENAMING_DECLARATION

LIBRARY_UNIT_DECLARATION ::=
     SUBPROGRAM_DECLARATION
   | PACKAGE_DECLARATION
   | GENERIC_DECLARATION
   | GENERIC_INSTANTIATION

LIBRARY_UNIT_RENAMING_DECLARATION ::=
     PACKAGE_RENAMING_DECLARATION
   | GENERIC_RENAMING_DECLARATION
   | SUBPROGRAM_RENAMING_DECLARATION

LIBRARY_UNIT_BODY ::= SUBPROGRAM_BODY | PACKAGE_BODY

PARENT_UNIT_NAME ::= NAME

CONTEXT_CLAUSE ::= {CONTEXT_ITEM}

CONTEXT_ITEM ::= WITH_CLAUSE | USE_CLAUSE

WITH_CLAUSE ::= LIMITED_WITH_CLAUSE | NONLIMITED_WITH_CLAUSE

LIMITED_WITH_CLAUSE ::=
   limited [private] with library_unit_NAME {, library_unit_NAME};

NONLIMITED_WITH_CLAUSE ::=
   [private] with library_unit_NAME {, library_unit_NAME};

BODY_STUB ::=
     SUBPROGRAM_BODY_STUB
   | PACKAGE_BODY_STUB
   | TASK_BODY_STUB
   | PROTECTED_BODY_STUB

SUBPROGRAM_BODY_STUB ::=
   [OVERRIDING_INDICATOR]
   SUBPROGRAM_SPECIFICATION is separate
      [ASPECT_SPECIFICATION];

PACKAGE_BODY_STUB ::=
   package body DEFINING_IDENTIFIER is separate
      [ASPECT_SPECIFICATION];

TASK_BODY_STUB ::=
   task body DEFINING_IDENTIFIER is separate
      [ASPECT_SPECIFICATION];

PROTECTED_BODY_STUB ::=
   protected body DEFINING_IDENTIFIER is separate
      [ASPECT_SPECIFICATION];

SUBUNIT ::= separate (PARENT_UNIT_NAME) PROPER_BODY

EXCEPTION_DECLARATION ::=
   DEFINING_IDENTIFIER_LIST : exception [ASPECT_SPECIFICATION];

HANDLED_SEQUENCE_OF_STATEMENTS ::=
   SEQUENCE_OF_STATEMENTS
   [exception
      EXCEPTION_HANDLER
      {EXCEPTION_HANDLER}]

EXCEPTION_HANDLER ::=
   when [CHOICE_PARAMETER_SPECIFICATION :]
      EXCEPTION_CHOICE {`|` EXCEPTION_CHOICE} => SEQUENCE_OF_STATEMENTS

CHOICE_PARAMETER_SPECIFICATION ::= DEFINING_IDENTIFIER

EXCEPTION_CHOICE ::= exception_NAME | others

RAISE_STATEMENT ::=
     raise;
   | raise exception_NAME [with string_EXPRESSION];

RAISE_EXPRESSION ::=
   raise exception_NAME [with string_SIMPLE_EXPRESSION]

GENERIC_DECLARATION ::=
   GENERIC_SUBPROGRAM_DECLARATION | GENERIC_PACKAGE_DECLARATION

GENERIC_SUBPROGRAM_DECLARATION ::=
   GENERIC_FORMAL_PART SUBPROGRAM_SPECIFICATION
      [ASPECT_SPECIFICATION];

GENERIC_PACKAGE_DECLARATION ::=
   GENERIC_FORMAL_PART PACKAGE_SPECIFICATION;

GENERIC_FORMAL_PART ::=
   generic {GENERIC_FORMAL_PARAMETER_DECLARATION | USE_CLAUSE}

GENERIC_FORMAL_PARAMETER_DECLARATION ::=
     FORMAL_OBJECT_DECLARATION
   | FORMAL_TYPE_DECLARATION
   | FORMAL_SUBPROGRAM_DECLARATION
   | FORMAL_PACKAGE_DECLARATION

GENERIC_INSTANTIATION ::=
     package DEFINING_PROGRAM_UNIT_NAME is
        new generic_package_NAME [GENERIC_ACTUAL_PART]
        [ASPECT_SPECIFICATION];
   | [OVERRIDING_INDICATOR]
     procedure DEFINING_PROGRAM_UNIT_NAME is
        new generic_procedure_NAME [GENERIC_ACTUAL_PART]
        [ASPECT_SPECIFICATION];
   | [OVERRIDING_INDICATOR]
     function DEFINING_DESIGNATOR is
        new generic_function_NAME [GENERIC_ACTUAL_PART]
        [ASPECT_SPECIFICATION];

GENERIC_ACTUAL_PART ::= (GENERIC_ASSOCIATION {, GENERIC_ASSOCIATION})

GENERIC_ASSOCIATION ::=
   [generic_formal_parameter_SELECTOR_NAME =>]
      EXPLICIT_GENERIC_ACTUAL_PARAMETER

EXPLICIT_GENERIC_ACTUAL_PARAMETER ::=
     EXPRESSION
   | variable_NAME
   | subprogram_NAME
   | entry_NAME
   | SUBTYPE_MARK
   | package_instance_NAME

FORMAL_OBJECT_DECLARATION ::=
     DEFINING_IDENTIFIER_LIST :
        MODE [NULL_EXCLUSION] SUBTYPE_MARK [:= DEFAULT_EXPRESSION]
        [ASPECT_SPECIFICATION];
   | DEFINING_IDENTIFIER_LIST :
        MODE ACCESS_DEFINITION [:= DEFAULT_EXPRESSION]
        [ASPECT_SPECIFICATION];

FORMAL_TYPE_DECLARATION ::=
     FORMAL_COMPLETE_TYPE_DECLARATION
   | FORMAL_INCOMPLETE_TYPE_DECLARATION

FORMAL_COMPLETE_TYPE_DECLARATION ::=
   type DEFINING_IDENTIFIER [DISCRIMINANT_PART] is
      FORMAL_TYPE_DEFINITION
      [or use default_SUBTYPE_MARK] [ASPECT_SPECIFICATION];

FORMAL_INCOMPLETE_TYPE_DECLARATION ::=
   type DEFINING_IDENTIFIER [DISCRIMINANT_PART] [is tagged]
      [or use default_SUBTYPE_MARK];

FORMAL_TYPE_DEFINITION ::=
     FORMAL_PRIVATE_TYPE_DEFINITION
   | FORMAL_DERIVED_TYPE_DEFINITION
   | FORMAL_DISCRETE_TYPE_DEFINITION
   | FORMAL_SIGNED_INTEGER_TYPE_DEFINITION
   | FORMAL_MODULAR_TYPE_DEFINITION
   | FORMAL_FLOATING_POINT_DEFINITION
   | FORMAL_ORDINARY_FIXED_POINT_DEFINITION
   | FORMAL_DECIMAL_FIXED_POINT_DEFINITION
   | FORMAL_ARRAY_TYPE_DEFINITION
   | FORMAL_ACCESS_TYPE_DEFINITION
   | FORMAL_INTERFACE_TYPE_DEFINITION

FORMAL_PRIVATE_TYPE_DEFINITION ::= [[abstract] tagged] [limited] private

FORMAL_DERIVED_TYPE_DEFINITION ::=
   [abstract] [limited | synchronized]
      new SUBTYPE_MARK [[and INTERFACE_LIST] with private]

FORMAL_DISCRETE_TYPE_DEFINITION ::= (<>)

FORMAL_SIGNED_INTEGER_TYPE_DEFINITION ::= RANGE <>

FORMAL_MODULAR_TYPE_DEFINITION ::= mod <>

FORMAL_FLOATING_POINT_DEFINITION ::= digits <>

FORMAL_ORDINARY_FIXED_POINT_DEFINITION ::= delta <>

FORMAL_DECIMAL_FIXED_POINT_DEFINITION ::= delta <> digits <>

FORMAL_ARRAY_TYPE_DEFINITION ::= ARRAY_TYPE_DEFINITION

FORMAL_ACCESS_TYPE_DEFINITION ::= ACCESS_TYPE_DEFINITION

FORMAL_INTERFACE_TYPE_DEFINITION ::= INTERFACE_TYPE_DEFINITION

FORMAL_SUBPROGRAM_DECLARATION ::=
     FORMAL_CONCRETE_SUBPROGRAM_DECLARATION
   | FORMAL_ABSTRACT_SUBPROGRAM_DECLARATION

FORMAL_CONCRETE_SUBPROGRAM_DECLARATION ::=
   with SUBPROGRAM_SPECIFICATION [is SUBPROGRAM_DEFAULT]
      [ASPECT_SPECIFICATION];

FORMAL_ABSTRACT_SUBPROGRAM_DECLARATION ::=
   with SUBPROGRAM_SPECIFICATION is abstract [SUBPROGRAM_DEFAULT]
      [ASPECT_SPECIFICATION];

SUBPROGRAM_DEFAULT ::= DEFAULT_NAME | <> | null

DEFAULT_NAME ::= NAME

FORMAL_PACKAGE_DECLARATION ::=
   with package DEFINING_IDENTIFIER is
      new generic_package_NAME FORMAL_PACKAGE_ACTUAL_PART
      [ASPECT_SPECIFICATION];

FORMAL_PACKAGE_ACTUAL_PART ::=
     ([others =>] <>)
   | [GENERIC_ACTUAL_PART]
   | (FORMAL_PACKAGE_ASSOCIATION {, FORMAL_PACKAGE_ASSOCIATION} [, others => <>])

FORMAL_PACKAGE_ASSOCIATION ::=
     GENERIC_ASSOCIATION
   | generic_formal_parameter_SELECTOR_NAME => <>

ASPECT_CLAUSE ::=
     ATTRIBUTE_DEFINITION_CLAUSE
   | ENUMERATION_REPRESENTATION_CLAUSE
   | RECORD_REPRESENTATION_CLAUSE
   | AT_CLAUSE

LOCAL_NAME ::=
     DIRECT_NAME
   | DIRECT_NAME'ATTRIBUTE_DESIGNATOR
   | library_unit_NAME

ASPECT_SPECIFICATION ::=
   with ASPECT_MARK [=> ASPECT_DEFINITION]
      {, ASPECT_MARK [=> ASPECT_DEFINITION]}

ASPECT_MARK ::= aspect_IDENTIFIER['CLASS]

ASPECT_DEFINITION ::=
     NAME
   | EXPRESSION
   | IDENTIFIER
   | AGGREGATE
   | GLOBAL_ASPECT_DEFINITION

ATTRIBUTE_DEFINITION_CLAUSE ::=
     for LOCAL_NAME'ATTRIBUTE_DESIGNATOR use EXPRESSION;
   | for LOCAL_NAME'ATTRIBUTE_DESIGNATOR use NAME;

ENUMERATION_REPRESENTATION_CLAUSE ::=
   for first_subtype_LOCAL_NAME use ENUMERATION_AGGREGATE;

ENUMERATION_AGGREGATE ::= ARRAY_AGGREGATE

RECORD_REPRESENTATION_CLAUSE ::=
   for first_subtype_LOCAL_NAME use
      record [MOD_CLAUSE]
         {COMPONENT_CLAUSE}
      end record [LOCAL_NAME];

COMPONENT_CLAUSE ::=
   component_LOCAL_NAME AT POSITION RANGE FIRST_BIT .. LAST_BIT;

POSITION ::= static_EXPRESSION

FIRST_BIT ::= static_SIMPLE_EXPRESSION

LAST_BIT ::= static_SIMPLE_EXPRESSION

CODE_STATEMENT ::= QUALIFIED_EXPRESSION;

STORAGE_POOL_INDICATOR ::= storage_pool_NAME | null | STANDARD

RESTRICTION ::=
     restriction_IDENTIFIER
   | restriction_parameter_IDENTIFIER => RESTRICTION_PARAMETER_ARGUMENT

RESTRICTION_PARAMETER_ARGUMENT ::= NAME | EXPRESSION

EXTENDED_GLOBAL_MODE ::= overriding BASIC_GLOBAL_MODE

FORMAL_PARAMETER_SET ::=
     FORMAL_GROUP_DESIGNATOR
   | FORMAL_PARAMETER_NAME
   | (FORMAL_PARAMETER_NAME {, FORMAL_PARAMETER_NAME})

FORMAL_GROUP_DESIGNATOR ::= null | all

FORMAL_PARAMETER_NAME ::=
     formal_SUBTYPE_MARK
   | formal_subprogram_NAME
   | formal_access_to_subprogram_object_NAME

DISPATCHING_OPERATION_SET ::=
     DISPATCHING_OPERATION_SPECIFIER
   | (DISPATCHING_OPERATION_SPECIFIER
        {, DISPATCHING_OPERATION_SPECIFIER})

DISPATCHING_OPERATION_SPECIFIER ::=
   dispatching_operation_NAME (object_NAME)

DELTA_CONSTRAINT ::= delta static_SIMPLE_EXPRESSION [RANGE_CONSTRAINT]

AT_CLAUSE ::= for DIRECT_NAME use AT EXPRESSION;

MOD_CLAUSE ::= AT mod static_EXPRESSION;

-- vim:ts=3:sw=3:et
