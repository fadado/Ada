--RM 02 Lexical Elements

IDENTIFIER ::= IDENTIFIER_START {IDENTIFIER_START | IDENTIFIER_EXTEND}

IDENTIFIER_START ::=
     LETTER_UPPERCASE
   | LETTER_LOWERCASE
   | LETTER_TITLECASE
   | LETTER_MODIFIER
   | LETTER_OTHER
   | NUMBER_LETTER

IDENTIFIER_EXTEND ::=
     MARK_NON_SPACING
   | MARK_SPACING_COMBINING
   | NUMBER_DECIMAL
   | PUNCTUATION_CONNECTOR

NUMERIC_LITERAL ::= DECIMAL_LITERAL | BASED_LITERAL

DIGIT ::= `0` | `1` | `2` | `3` | `4` | `5` | `6` | `7` | `8` | `9`

DECIMAL_LITERAL ::= NUMERAL [.NUMERAL] [EXPONENT]

NUMERAL ::= DIGIT {[UNDERLINE] DIGIT}

EXPONENT ::= `E` [+] NUMERAL | `E` â€“ NUMERAL

DIGIT ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

BASED_LITERAL ::= BASE # BASED_NUMERAL [.BASED_NUMERAL] # [EXPONENT]

BASE ::= NUMERAL

BASED_NUMERAL ::= EXTENDED_DIGIT {[UNDERLINE] EXTENDED_DIGIT}

EXTENDED_DIGIT ::= DIGIT | `A` | `B` | `C` | `D` | `E` | `F`

CHARACTER_LITERAL ::= 'GRAPHIC_CHARACTER'

STRING_LITERAL ::= "{STRING_ELEMENT}"

STRING_ELEMENT ::= "" | non_quotation_mark_GRAPHIC_CHARACTER

COMMENT ::= --{non_end_of_line_CHARACTER}

pragma ::=
   pragma IDENTIFIER
      [(PRAGMA_ARGUMENT_ASSOCIATION {, PRAGMA_ARGUMENT_ASSOCIATION})];

PRAGMA_ARGUMENT_ASSOCIATION ::=
     [pragma_argument_IDENTIFIER =>] NAME
   | [pragma_argument_IDENTIFIER =>] EXPRESSION
   | pragma_argument_ASPECT_MARK =>  NAME
   | pragma_argument_ASPECT_MARK =>  EXPRESSION

-- vim:ts=3:sw=3:et:syntax=ada
