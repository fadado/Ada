--RM 03 Declarations and Types

BASIC_DECLARATION ::=
     TYPE_DECLARATION
   | SUBTYPE_DECLARATION
   | OBJECT_DECLARATION
   | NUMBER_DECLARATION
   | SUBPROGRAM_DECLARATION
   | ABSTRACT_SUBPROGRAM_DECLARATION
   | NULL_PROCEDURE_DECLARATION
   | EXPRESSION_FUNCTION_DECLARATION
   | PACKAGE_DECLARATION
   | RENAMING_DECLARATION
   | EXCEPTION_DECLARATION
   | GENERIC_DECLARATION
   | GENERIC_INSTANTIATION

DEFINING_IDENTIFIER ::= IDENTIFIER

TYPE_DECLARATION ::=
     FULL_TYPE_DECLARATION
   | INCOMPLETE_TYPE_DECLARATION
   | PRIVATE_TYPE_DECLARATION
   | PRIVATE_EXTENSION_DECLARATION

FULL_TYPE_DECLARATION ::=
     type DEFINING_IDENTIFIER [KNOWN_DISCRIMINANT_PART] is TYPE_DEFINITION
        [ASPECT_SPECIFICATION];
   | TASK_TYPE_DECLARATION
   | PROTECTED_TYPE_DECLARATION

TYPE_DEFINITION ::=
     ENUMERATION_TYPE_DEFINITION
   | INTEGER_TYPE_DEFINITION
   | REAL_TYPE_DEFINITION
   | ARRAY_TYPE_DEFINITION
   | RECORD_TYPE_DEFINITION
   | ACCESS_TYPE_DEFINITION
   | DERIVED_TYPE_DEFINITION
   | INTERFACE_TYPE_DEFINITION

SUBTYPE_DECLARATION ::=
   subtype DEFINING_IDENTIFIER is SUBTYPE_INDICATION
      [ASPECT_SPECIFICATION];

SUBTYPE_INDICATION ::= [NULL_EXCLUSION] SUBTYPE_MARK [CONSTRAINT]

SUBTYPE_MARK ::= subtype_NAME

CONSTRAINT ::= SCALAR_CONSTRAINT | COMPOSITE_CONSTRAINT

SCALAR_CONSTRAINT ::=
   RANGE_CONSTRAINT | DIGITS_CONSTRAINT | DELTA_CONSTRAINT

COMPOSITE_CONSTRAINT ::= INDEX_CONSTRAINT | DISCRIMINANT_CONSTRAINT

OBJECT_DECLARATION ::=
     DEFINING_IDENTIFIER_LIST :
        [aliased] [constant] SUBTYPE_INDICATION [:= EXPRESSION]
        [ASPECT_SPECIFICATION];
   | DEFINING_IDENTIFIER_LIST :
        [aliased] [constant] ACCESS_DEFINITION [:= EXPRESSION]
        [ASPECT_SPECIFICATION];
   | DEFINING_IDENTIFIER_LIST :
        [aliased] [constant] ARRAY_TYPE_DEFINITION [:= EXPRESSION]
        [ASPECT_SPECIFICATION];
   | SINGLE_TASK_DECLARATION
   | SINGLE_PROTECTED_DECLARATION

DEFINING_IDENTIFIER_LIST ::= DEFINING_IDENTIFIER {, DEFINING_IDENTIFIER}

NUMBER_DECLARATION ::=
   DEFINING_IDENTIFIER_LIST : constant := static_EXPRESSION;

DERIVED_TYPE_DEFINITION ::=
   [abstract] [limited] new parent_SUBTYPE_INDICATION
      [[and INTERFACE_LIST] RECORD_EXTENSION_PART]

RANGE_CONSTRAINT ::= range RANGE_DEFINITION

RANGE_DEFINITION ::=
     RANGE_ATTRIBUTE_REFERENCE
   | SIMPLE_EXPRESSION .. SIMPLE_EXPRESSION

ENUMERATION_TYPE_DEFINITION ::=
   (ENUMERATION_LITERAL_SPECIFICATION
      {, ENUMERATION_LITERAL_SPECIFICATION})

ENUMERATION_LITERAL_SPECIFICATION ::=
   DEFINING_IDENTIFIER | DEFINING_CHARACTER_LITERAL

DEFINING_CHARACTER_LITERAL ::= CHARACTER_LITERAL

INTEGER_TYPE_DEFINITION ::=
   SIGNED_INTEGER_TYPE_DEFINITION | MODULAR_TYPE_DEFINITION

SIGNED_INTEGER_TYPE_DEFINITION ::=
   range static_SIMPLE_EXPRESSION .. static_SIMPLE_EXPRESSION

MODULAR_TYPE_DEFINITION ::= mod static_EXPRESSION

REAL_TYPE_DEFINITION ::=
     FLOATING_POINT_DEFINITION | FIXED_POINT_DEFINITION

FLOATING_POINT_DEFINITION ::=
   digits static_EXPRESSION [REAL_RANGE_SPECIFICATION]

REAL_RANGE_SPECIFICATION ::=
   range static_SIMPLE_EXPRESSION .. static_SIMPLE_EXPRESSION

FIXED_POINT_DEFINITION ::=
     ORDINARY_FIXED_POINT_DEFINITION | DECIMAL_FIXED_POINT_DEFINITION

ORDINARY_FIXED_POINT_DEFINITION ::=
   delta static_EXPRESSION REAL_RANGE_SPECIFICATION

DECIMAL_FIXED_POINT_DEFINITION ::=
   delta static_EXPRESSION digits static_EXPRESSION
      [REAL_RANGE_SPECIFICATION]

DIGITS_CONSTRAINT ::=
   digits static_SIMPLE_EXPRESSION [RANGE_CONSTRAINT]

ARRAY_TYPE_DEFINITION ::=
     UNCONSTRAINED_ARRAY_DEFINITION | CONSTRAINED_ARRAY_DEFINITION

UNCONSTRAINED_ARRAY_DEFINITION ::=
   array (INDEX_SUBTYPE_DEFINITION {, INDEX_SUBTYPE_DEFINITION})
      of COMPONENT_DEFINITION

INDEX_SUBTYPE_DEFINITION ::= SUBTYPE_MARK range <>

CONSTRAINED_ARRAY_DEFINITION ::=
   array (DISCRETE_SUBTYPE_DEFINITION {, DISCRETE_SUBTYPE_DEFINITION})
      of COMPONENT_DEFINITION

DISCRETE_SUBTYPE_DEFINITION ::=
   discrete_SUBTYPE_INDICATION | RANGE_DEFINITION

COMPONENT_DEFINITION ::=
   [aliased] SUBTYPE_INDICATION | [aliased] ACCESS_DEFINITION

INDEX_CONSTRAINT ::= (DISCRETE_RANGE {, DISCRETE_RANGE})

DISCRETE_RANGE ::= discrete_SUBTYPE_INDICATION | RANGE_DEFINITION

DISCRIMINANT_PART ::= UNKNOWN_DISCRIMINANT_PART | KNOWN_DISCRIMINANT_PART

UNKNOWN_DISCRIMINANT_PART ::= (<>)

KNOWN_DISCRIMINANT_PART ::=
   (DISCRIMINANT_SPECIFICATION {; DISCRIMINANT_SPECIFICATION})

DISCRIMINANT_SPECIFICATION ::=
     DEFINING_IDENTIFIER_LIST : [NULL_EXCLUSION] SUBTYPE_MARK
        [:= DEFAULT_EXPRESSION] [ASPECT_SPECIFICATION]
   | DEFINING_IDENTIFIER_LIST : ACCESS_DEFINITION
        [:= DEFAULT_EXPRESSION] [ASPECT_SPECIFICATION]

DEFAULT_EXPRESSION ::= EXPRESSION

DISCRIMINANT_CONSTRAINT ::=
   (DISCRIMINANT_ASSOCIATION {, DISCRIMINANT_ASSOCIATION})

DISCRIMINANT_ASSOCIATION ::=
   [discriminant_SELECTOR_NAME {`|` discriminant_SELECTOR_NAME} =>]
      EXPRESSION

RECORD_TYPE_DEFINITION ::=
   [[abstract] tagged] [limited] RECORD_DEFINITION

RECORD_DEFINITION ::=
     record
        COMPONENT_LIST
     end record [record_IDENTIFIER]
   | null record

COMPONENT_LIST ::=
     COMPONENT_ITEM {COMPONENT_ITEM}
   | {COMPONENT_ITEM} VARIANT_PART
   | null;

COMPONENT_ITEM ::= COMPONENT_DECLARATION | ASPECT_CLAUSE

COMPONENT_DECLARATION ::=
   DEFINING_IDENTIFIER_LIST : COMPONENT_DEFINITION [:= DEFAULT_EXPRESSION]
      [ASPECT_SPECIFICATION];

VARIANT_PART ::=
   case discriminant_DIRECT_NAME is
      VARIANT
      {VARIANT}
   end case;

VARIANT ::=
   when DISCRETE_CHOICE_LIST =>
      COMPONENT_LIST

DISCRETE_CHOICE_LIST ::= DISCRETE_CHOICE {`|` DISCRETE_CHOICE}

DISCRETE_CHOICE ::=
     CHOICE_EXPRESSION
   | discrete_SUBTYPE_INDICATION
   | RANGE_DEFINITION
   | others

RECORD_EXTENSION_PART ::= with RECORD_DEFINITION

ABSTRACT_SUBPROGRAM_DECLARATION ::=
   [OVERRIDING_INDICATOR]
   SUBPROGRAM_SPECIFICATION is abstract
      [ASPECT_SPECIFICATION];

INTERFACE_TYPE_DEFINITION ::=
   [limited | task | protected | synchronized]
      interface [and INTERFACE_LIST]

INTERFACE_LIST ::= interface_SUBTYPE_MARK {and interface_SUBTYPE_MARK}

ACCESS_TYPE_DEFINITION ::=
     [NULL_EXCLUSION] ACCESS_TO_OBJECT_DEFINITION
   | [NULL_EXCLUSION] ACCESS_TO_SUBPROGRAM_DEFINITION

ACCESS_TO_OBJECT_DEFINITION ::=
   access [GENERAL_ACCESS_MODIFIER] SUBTYPE_INDICATION

GENERAL_ACCESS_MODIFIER ::= all | constant

ACCESS_TO_SUBPROGRAM_DEFINITION ::=
     access [protected] procedure PARAMETER_PROFILE
   | access [protected] function PARAMETER_AND_RESULT_PROFILE

NULL_EXCLUSION ::= not null

ACCESS_DEFINITION ::=
     [NULL_EXCLUSION] access [constant] SUBTYPE_MARK
   | [NULL_EXCLUSION] access [protected]
        procedure PARAMETER_PROFILE
   | [NULL_EXCLUSION] access [protected]
        function PARAMETER_AND_RESULT_PROFILE

INCOMPLETE_TYPE_DECLARATION ::=
   type DEFINING_IDENTIFIER [DISCRIMINANT_PART] [is tagged];

DECLARATIVE_PART ::= {DECLARATIVE_ITEM}

DECLARATIVE_ITEM ::= BASIC_DECLARATIVE_ITEM | BODY_DEFINITION

BASIC_DECLARATIVE_ITEM ::= BASIC_DECLARATION | ASPECT_CLAUSE | USE_CLAUSE

BODY_DEFINITION ::= PROPER_BODY | BODY_STUB

PROPER_BODY ::=
     SUBPROGRAM_BODY
   | PACKAGE_BODY
   | TASK_BODY
   | PROTECTED_BODY

-- vim:ts=3:sw=3:et:syntax=ada
